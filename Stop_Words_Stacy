import spacy
import pandas as pd
nlp = spacy.load("en_core_web_sm")

#!python -m spacy download en_core_web_sm
# Load English model from spaCy
nlp = spacy.load("en_core_web_sm")
​
# Get the list of English stop words
stop_words = nlp.Defaults.stop_words

# Convert the stop words into a DataFrame
stop_words_df = pd.DataFrame({"Stop_Words": list(stop_words)})

# Save the DataFrame to a CSV file
stop_words_df.to_csv("english_stop_words.csv", index=False)

import pandas as pd
nlp = spacy.load("en_core_web_sm")

# Load English model from spaCy
nlp = spacy.load("en_core_web_sm")

# Define your custom list of stop words
custom_stop_words = ["although", "her", "whole", "an", "whereupon", "within" "doing", "when", "whose", "until", "into", "whereby", 
                     "together", "before", "now", "must", "anyhow", "whenever", "becomes", "yet" "these", "anything", "give", "regarding", "had", "am", "thereby", "therein", "two", "up", "wherever", 
                     "onto", "though", "nevertheless", "upon", "please", "seem", "amount", "anyone", "every", "hence", "them", "there", "side", "enough", 
                     "put", "their", "throughout", "below", "but", "myself", "are", "say", "almost", "ourselves" "last", "thus", "latterly", "done", "under",
                     "nothing", "herself", "such", "noone", "yourselves", "across", "hereafter", "themselves", "seems", "again", "through", "whither", "thereupon", "whether", "on", "becoming", "that", "us", "become", "eight", "everyone", 
                     "its", "would", "in", "fifteen", "too", "could", "due", "whatever", "toward", "well", "after", "using", "already", "much", "namely", "should", "to", "made", "him", 
                     "each", "she", "he", "both", "me", "various", "my", "ever", "eleven", "one", "serious", "between", "yourself", "few", "really", "hereby", "besides", "can", "beyond", "at", "has", "amongst", 
                     "less", "anywhere", "sixty", "still", "what", "front", "during", "who", "several", "been", "herein", "does", "used", "from", "fifty", "mostly", 
                     "beside", "we", "four", "everywhere", "for", "his", "down", "will", "did", "where", "hundred", "none", "of", "sometime", "whereafter", "around", "get", "twelve", "ca", "move", "very", "your", "our", "beforehand", "forty", "over", "behind", 
                     "hereupon", "the", "as", "just", "except", "same", "than", "it", "however", "along", "full", "about", "was", "perhaps", "back", "a" "nowhere", "mine", "keep", "anyway", "have", "thru", "top", "see", "thence", "meanwhile",
                     "some", "hers", "otherwise", "be", "yours", "why", "against", "indeed", "moreover", "third", "first", "seemed", "something", "quite", "or", "whoever", "part", "once", "others", "therefore", "alone", "here", "is", "next", "this", 
                     "how", "so", "you", "seeming", "five", "more", "everything", "all", "somewhere", "may", "whom", "per", "another", "twenty", "make", "most", "show", "go", "further", "and", "itself", "three", "somehow", "name", "often", "among", "take", 
                     "wherein", "while", "ours", "always", "thereafter", "rather", "they", "nine", "became", "only", "then", "formerly", "because", "empty", "those", "ten", "do", "via", "himself", "other", "else", "former", "any", "by", "which", "unless", "since", 
                     "sometimes", "many", "six", "whereas", "also", "above", "even", "with", "someone", "were", "if", "least", "elsewhere", "might", "afterwards", "out", "either", "own", "bottom", "off", "whence", "latter", "being", "call", "towards", "without", "few",
                    "never", "nowhere", "nobody", "none", "a", "he" ]

# Add the custom stop words to spaCy's default stop words
for word in custom_stop_words:
    nlp.Defaults.stop_words.add(word)

# Example text with custom stop words
text = "This is an example sentence with although and her that we want to remove."
​
# Process the text with spaCy
doc = nlp(text)
​
# Filter out the stop words
filtered_text = " ".join(token.text for token in doc if not token.is_stop)
​
print("Filtered Text:", filtered_text)
​
Filtered Text: example sentence want remove .
